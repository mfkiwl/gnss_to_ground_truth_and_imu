# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from msg_gnss_prep/msg_gnss_prep.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class msg_gnss_prep(genpy.Message):
  _md5sum = "a853207137375c157ed82efabaf1b58b"
  _type = "msg_gnss_prep/msg_gnss_prep"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float64 x
float64 y
float64 z
float64 latitude
float64 longitude
float64 height
float32 body_acceleration_x
float32 body_acceleration_y
float32 body_acceleration_z
float32 raw_acceleration_x
float32 raw_acceleration_y
float32 raw_acceleration_z
float32 raw_angular_velocity_x
float32 raw_angular_velocity_y
float32 raw_angular_velocity_z
float32 body_velocity_x
float32 body_velocity_y
float32 body_velocity_z
float32 orientation_x
float32 orientation_y
float32 orientation_z
float32 orientation_w
float32 roll_angle
float32 pitch_angle
float32 yaw_angle
uint8 flag
uint8 gps_status

"""
  __slots__ = ['x','y','z','latitude','longitude','height','body_acceleration_x','body_acceleration_y','body_acceleration_z','raw_acceleration_x','raw_acceleration_y','raw_acceleration_z','raw_angular_velocity_x','raw_angular_velocity_y','raw_angular_velocity_z','body_velocity_x','body_velocity_y','body_velocity_z','orientation_x','orientation_y','orientation_z','orientation_w','roll_angle','pitch_angle','yaw_angle','flag','gps_status']
  _slot_types = ['float64','float64','float64','float64','float64','float64','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       x,y,z,latitude,longitude,height,body_acceleration_x,body_acceleration_y,body_acceleration_z,raw_acceleration_x,raw_acceleration_y,raw_acceleration_z,raw_angular_velocity_x,raw_angular_velocity_y,raw_angular_velocity_z,body_velocity_x,body_velocity_y,body_velocity_z,orientation_x,orientation_y,orientation_z,orientation_w,roll_angle,pitch_angle,yaw_angle,flag,gps_status

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(msg_gnss_prep, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.x is None:
        self.x = 0.
      if self.y is None:
        self.y = 0.
      if self.z is None:
        self.z = 0.
      if self.latitude is None:
        self.latitude = 0.
      if self.longitude is None:
        self.longitude = 0.
      if self.height is None:
        self.height = 0.
      if self.body_acceleration_x is None:
        self.body_acceleration_x = 0.
      if self.body_acceleration_y is None:
        self.body_acceleration_y = 0.
      if self.body_acceleration_z is None:
        self.body_acceleration_z = 0.
      if self.raw_acceleration_x is None:
        self.raw_acceleration_x = 0.
      if self.raw_acceleration_y is None:
        self.raw_acceleration_y = 0.
      if self.raw_acceleration_z is None:
        self.raw_acceleration_z = 0.
      if self.raw_angular_velocity_x is None:
        self.raw_angular_velocity_x = 0.
      if self.raw_angular_velocity_y is None:
        self.raw_angular_velocity_y = 0.
      if self.raw_angular_velocity_z is None:
        self.raw_angular_velocity_z = 0.
      if self.body_velocity_x is None:
        self.body_velocity_x = 0.
      if self.body_velocity_y is None:
        self.body_velocity_y = 0.
      if self.body_velocity_z is None:
        self.body_velocity_z = 0.
      if self.orientation_x is None:
        self.orientation_x = 0.
      if self.orientation_y is None:
        self.orientation_y = 0.
      if self.orientation_z is None:
        self.orientation_z = 0.
      if self.orientation_w is None:
        self.orientation_w = 0.
      if self.roll_angle is None:
        self.roll_angle = 0.
      if self.pitch_angle is None:
        self.pitch_angle = 0.
      if self.yaw_angle is None:
        self.yaw_angle = 0.
      if self.flag is None:
        self.flag = 0
      if self.gps_status is None:
        self.gps_status = 0
    else:
      self.x = 0.
      self.y = 0.
      self.z = 0.
      self.latitude = 0.
      self.longitude = 0.
      self.height = 0.
      self.body_acceleration_x = 0.
      self.body_acceleration_y = 0.
      self.body_acceleration_z = 0.
      self.raw_acceleration_x = 0.
      self.raw_acceleration_y = 0.
      self.raw_acceleration_z = 0.
      self.raw_angular_velocity_x = 0.
      self.raw_angular_velocity_y = 0.
      self.raw_angular_velocity_z = 0.
      self.body_velocity_x = 0.
      self.body_velocity_y = 0.
      self.body_velocity_z = 0.
      self.orientation_x = 0.
      self.orientation_y = 0.
      self.orientation_z = 0.
      self.orientation_w = 0.
      self.roll_angle = 0.
      self.pitch_angle = 0.
      self.yaw_angle = 0.
      self.flag = 0
      self.gps_status = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_6d19f2B().pack(_x.x, _x.y, _x.z, _x.latitude, _x.longitude, _x.height, _x.body_acceleration_x, _x.body_acceleration_y, _x.body_acceleration_z, _x.raw_acceleration_x, _x.raw_acceleration_y, _x.raw_acceleration_z, _x.raw_angular_velocity_x, _x.raw_angular_velocity_y, _x.raw_angular_velocity_z, _x.body_velocity_x, _x.body_velocity_y, _x.body_velocity_z, _x.orientation_x, _x.orientation_y, _x.orientation_z, _x.orientation_w, _x.roll_angle, _x.pitch_angle, _x.yaw_angle, _x.flag, _x.gps_status))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 126
      (_x.x, _x.y, _x.z, _x.latitude, _x.longitude, _x.height, _x.body_acceleration_x, _x.body_acceleration_y, _x.body_acceleration_z, _x.raw_acceleration_x, _x.raw_acceleration_y, _x.raw_acceleration_z, _x.raw_angular_velocity_x, _x.raw_angular_velocity_y, _x.raw_angular_velocity_z, _x.body_velocity_x, _x.body_velocity_y, _x.body_velocity_z, _x.orientation_x, _x.orientation_y, _x.orientation_z, _x.orientation_w, _x.roll_angle, _x.pitch_angle, _x.yaw_angle, _x.flag, _x.gps_status,) = _get_struct_6d19f2B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_6d19f2B().pack(_x.x, _x.y, _x.z, _x.latitude, _x.longitude, _x.height, _x.body_acceleration_x, _x.body_acceleration_y, _x.body_acceleration_z, _x.raw_acceleration_x, _x.raw_acceleration_y, _x.raw_acceleration_z, _x.raw_angular_velocity_x, _x.raw_angular_velocity_y, _x.raw_angular_velocity_z, _x.body_velocity_x, _x.body_velocity_y, _x.body_velocity_z, _x.orientation_x, _x.orientation_y, _x.orientation_z, _x.orientation_w, _x.roll_angle, _x.pitch_angle, _x.yaw_angle, _x.flag, _x.gps_status))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 126
      (_x.x, _x.y, _x.z, _x.latitude, _x.longitude, _x.height, _x.body_acceleration_x, _x.body_acceleration_y, _x.body_acceleration_z, _x.raw_acceleration_x, _x.raw_acceleration_y, _x.raw_acceleration_z, _x.raw_angular_velocity_x, _x.raw_angular_velocity_y, _x.raw_angular_velocity_z, _x.body_velocity_x, _x.body_velocity_y, _x.body_velocity_z, _x.orientation_x, _x.orientation_y, _x.orientation_z, _x.orientation_w, _x.roll_angle, _x.pitch_angle, _x.yaw_angle, _x.flag, _x.gps_status,) = _get_struct_6d19f2B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_6d19f2B = None
def _get_struct_6d19f2B():
    global _struct_6d19f2B
    if _struct_6d19f2B is None:
        _struct_6d19f2B = struct.Struct("<6d19f2B")
    return _struct_6d19f2B
