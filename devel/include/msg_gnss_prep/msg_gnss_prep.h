// Generated by gencpp from file msg_gnss_prep/msg_gnss_prep.msg
// DO NOT EDIT!


#ifndef MSG_GNSS_PREP_MESSAGE_MSG_GNSS_PREP_H
#define MSG_GNSS_PREP_MESSAGE_MSG_GNSS_PREP_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace msg_gnss_prep
{
template <class ContainerAllocator>
struct msg_gnss_prep_
{
  typedef msg_gnss_prep_<ContainerAllocator> Type;

  msg_gnss_prep_()
    : x(0.0)
    , y(0.0)
    , z(0.0)
    , latitude(0.0)
    , longitude(0.0)
    , height(0.0)
    , body_acceleration_x(0.0)
    , body_acceleration_y(0.0)
    , body_acceleration_z(0.0)
    , raw_acceleration_x(0.0)
    , raw_acceleration_y(0.0)
    , raw_acceleration_z(0.0)
    , raw_angular_velocity_x(0.0)
    , raw_angular_velocity_y(0.0)
    , raw_angular_velocity_z(0.0)
    , body_velocity_x(0.0)
    , body_velocity_y(0.0)
    , body_velocity_z(0.0)
    , orientation_x(0.0)
    , orientation_y(0.0)
    , orientation_z(0.0)
    , orientation_w(0.0)
    , roll_angle(0.0)
    , pitch_angle(0.0)
    , yaw_angle(0.0)
    , flag(0)
    , gps_status(0)  {
    }
  msg_gnss_prep_(const ContainerAllocator& _alloc)
    : x(0.0)
    , y(0.0)
    , z(0.0)
    , latitude(0.0)
    , longitude(0.0)
    , height(0.0)
    , body_acceleration_x(0.0)
    , body_acceleration_y(0.0)
    , body_acceleration_z(0.0)
    , raw_acceleration_x(0.0)
    , raw_acceleration_y(0.0)
    , raw_acceleration_z(0.0)
    , raw_angular_velocity_x(0.0)
    , raw_angular_velocity_y(0.0)
    , raw_angular_velocity_z(0.0)
    , body_velocity_x(0.0)
    , body_velocity_y(0.0)
    , body_velocity_z(0.0)
    , orientation_x(0.0)
    , orientation_y(0.0)
    , orientation_z(0.0)
    , orientation_w(0.0)
    , roll_angle(0.0)
    , pitch_angle(0.0)
    , yaw_angle(0.0)
    , flag(0)
    , gps_status(0)  {
  (void)_alloc;
    }



   typedef double _x_type;
  _x_type x;

   typedef double _y_type;
  _y_type y;

   typedef double _z_type;
  _z_type z;

   typedef double _latitude_type;
  _latitude_type latitude;

   typedef double _longitude_type;
  _longitude_type longitude;

   typedef double _height_type;
  _height_type height;

   typedef float _body_acceleration_x_type;
  _body_acceleration_x_type body_acceleration_x;

   typedef float _body_acceleration_y_type;
  _body_acceleration_y_type body_acceleration_y;

   typedef float _body_acceleration_z_type;
  _body_acceleration_z_type body_acceleration_z;

   typedef float _raw_acceleration_x_type;
  _raw_acceleration_x_type raw_acceleration_x;

   typedef float _raw_acceleration_y_type;
  _raw_acceleration_y_type raw_acceleration_y;

   typedef float _raw_acceleration_z_type;
  _raw_acceleration_z_type raw_acceleration_z;

   typedef float _raw_angular_velocity_x_type;
  _raw_angular_velocity_x_type raw_angular_velocity_x;

   typedef float _raw_angular_velocity_y_type;
  _raw_angular_velocity_y_type raw_angular_velocity_y;

   typedef float _raw_angular_velocity_z_type;
  _raw_angular_velocity_z_type raw_angular_velocity_z;

   typedef float _body_velocity_x_type;
  _body_velocity_x_type body_velocity_x;

   typedef float _body_velocity_y_type;
  _body_velocity_y_type body_velocity_y;

   typedef float _body_velocity_z_type;
  _body_velocity_z_type body_velocity_z;

   typedef float _orientation_x_type;
  _orientation_x_type orientation_x;

   typedef float _orientation_y_type;
  _orientation_y_type orientation_y;

   typedef float _orientation_z_type;
  _orientation_z_type orientation_z;

   typedef float _orientation_w_type;
  _orientation_w_type orientation_w;

   typedef float _roll_angle_type;
  _roll_angle_type roll_angle;

   typedef float _pitch_angle_type;
  _pitch_angle_type pitch_angle;

   typedef float _yaw_angle_type;
  _yaw_angle_type yaw_angle;

   typedef uint8_t _flag_type;
  _flag_type flag;

   typedef uint8_t _gps_status_type;
  _gps_status_type gps_status;





  typedef boost::shared_ptr< ::msg_gnss_prep::msg_gnss_prep_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::msg_gnss_prep::msg_gnss_prep_<ContainerAllocator> const> ConstPtr;

}; // struct msg_gnss_prep_

typedef ::msg_gnss_prep::msg_gnss_prep_<std::allocator<void> > msg_gnss_prep;

typedef boost::shared_ptr< ::msg_gnss_prep::msg_gnss_prep > msg_gnss_prepPtr;
typedef boost::shared_ptr< ::msg_gnss_prep::msg_gnss_prep const> msg_gnss_prepConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::msg_gnss_prep::msg_gnss_prep_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::msg_gnss_prep::msg_gnss_prep_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace msg_gnss_prep

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'msg_gnss_prep': ['/home/wzw/gnss_to_path_and_imu/src/msg/msg_gnss_prep/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::msg_gnss_prep::msg_gnss_prep_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::msg_gnss_prep::msg_gnss_prep_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msg_gnss_prep::msg_gnss_prep_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msg_gnss_prep::msg_gnss_prep_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msg_gnss_prep::msg_gnss_prep_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msg_gnss_prep::msg_gnss_prep_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::msg_gnss_prep::msg_gnss_prep_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a853207137375c157ed82efabaf1b58b";
  }

  static const char* value(const ::msg_gnss_prep::msg_gnss_prep_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa853207137375c15ULL;
  static const uint64_t static_value2 = 0x7ed82efabaf1b58bULL;
};

template<class ContainerAllocator>
struct DataType< ::msg_gnss_prep::msg_gnss_prep_<ContainerAllocator> >
{
  static const char* value()
  {
    return "msg_gnss_prep/msg_gnss_prep";
  }

  static const char* value(const ::msg_gnss_prep::msg_gnss_prep_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::msg_gnss_prep::msg_gnss_prep_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 x\n\
float64 y\n\
float64 z\n\
float64 latitude\n\
float64 longitude\n\
float64 height\n\
float32 body_acceleration_x\n\
float32 body_acceleration_y\n\
float32 body_acceleration_z\n\
float32 raw_acceleration_x\n\
float32 raw_acceleration_y\n\
float32 raw_acceleration_z\n\
float32 raw_angular_velocity_x\n\
float32 raw_angular_velocity_y\n\
float32 raw_angular_velocity_z\n\
float32 body_velocity_x\n\
float32 body_velocity_y\n\
float32 body_velocity_z\n\
float32 orientation_x\n\
float32 orientation_y\n\
float32 orientation_z\n\
float32 orientation_w\n\
float32 roll_angle\n\
float32 pitch_angle\n\
float32 yaw_angle\n\
uint8 flag\n\
uint8 gps_status\n\
\n\
";
  }

  static const char* value(const ::msg_gnss_prep::msg_gnss_prep_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::msg_gnss_prep::msg_gnss_prep_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
      stream.next(m.latitude);
      stream.next(m.longitude);
      stream.next(m.height);
      stream.next(m.body_acceleration_x);
      stream.next(m.body_acceleration_y);
      stream.next(m.body_acceleration_z);
      stream.next(m.raw_acceleration_x);
      stream.next(m.raw_acceleration_y);
      stream.next(m.raw_acceleration_z);
      stream.next(m.raw_angular_velocity_x);
      stream.next(m.raw_angular_velocity_y);
      stream.next(m.raw_angular_velocity_z);
      stream.next(m.body_velocity_x);
      stream.next(m.body_velocity_y);
      stream.next(m.body_velocity_z);
      stream.next(m.orientation_x);
      stream.next(m.orientation_y);
      stream.next(m.orientation_z);
      stream.next(m.orientation_w);
      stream.next(m.roll_angle);
      stream.next(m.pitch_angle);
      stream.next(m.yaw_angle);
      stream.next(m.flag);
      stream.next(m.gps_status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct msg_gnss_prep_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::msg_gnss_prep::msg_gnss_prep_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::msg_gnss_prep::msg_gnss_prep_<ContainerAllocator>& v)
  {
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<double>::stream(s, indent + "  ", v.z);
    s << indent << "latitude: ";
    Printer<double>::stream(s, indent + "  ", v.latitude);
    s << indent << "longitude: ";
    Printer<double>::stream(s, indent + "  ", v.longitude);
    s << indent << "height: ";
    Printer<double>::stream(s, indent + "  ", v.height);
    s << indent << "body_acceleration_x: ";
    Printer<float>::stream(s, indent + "  ", v.body_acceleration_x);
    s << indent << "body_acceleration_y: ";
    Printer<float>::stream(s, indent + "  ", v.body_acceleration_y);
    s << indent << "body_acceleration_z: ";
    Printer<float>::stream(s, indent + "  ", v.body_acceleration_z);
    s << indent << "raw_acceleration_x: ";
    Printer<float>::stream(s, indent + "  ", v.raw_acceleration_x);
    s << indent << "raw_acceleration_y: ";
    Printer<float>::stream(s, indent + "  ", v.raw_acceleration_y);
    s << indent << "raw_acceleration_z: ";
    Printer<float>::stream(s, indent + "  ", v.raw_acceleration_z);
    s << indent << "raw_angular_velocity_x: ";
    Printer<float>::stream(s, indent + "  ", v.raw_angular_velocity_x);
    s << indent << "raw_angular_velocity_y: ";
    Printer<float>::stream(s, indent + "  ", v.raw_angular_velocity_y);
    s << indent << "raw_angular_velocity_z: ";
    Printer<float>::stream(s, indent + "  ", v.raw_angular_velocity_z);
    s << indent << "body_velocity_x: ";
    Printer<float>::stream(s, indent + "  ", v.body_velocity_x);
    s << indent << "body_velocity_y: ";
    Printer<float>::stream(s, indent + "  ", v.body_velocity_y);
    s << indent << "body_velocity_z: ";
    Printer<float>::stream(s, indent + "  ", v.body_velocity_z);
    s << indent << "orientation_x: ";
    Printer<float>::stream(s, indent + "  ", v.orientation_x);
    s << indent << "orientation_y: ";
    Printer<float>::stream(s, indent + "  ", v.orientation_y);
    s << indent << "orientation_z: ";
    Printer<float>::stream(s, indent + "  ", v.orientation_z);
    s << indent << "orientation_w: ";
    Printer<float>::stream(s, indent + "  ", v.orientation_w);
    s << indent << "roll_angle: ";
    Printer<float>::stream(s, indent + "  ", v.roll_angle);
    s << indent << "pitch_angle: ";
    Printer<float>::stream(s, indent + "  ", v.pitch_angle);
    s << indent << "yaw_angle: ";
    Printer<float>::stream(s, indent + "  ", v.yaw_angle);
    s << indent << "flag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.flag);
    s << indent << "gps_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gps_status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MSG_GNSS_PREP_MESSAGE_MSG_GNSS_PREP_H
